{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Dice","props","className","face","rolling","RollDice","useState","die1","die2","state","setState","sides","onClick","newDie1","Math","floor","random","length","newDie2","setTimeout","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAIe,SAASA,EAAKC,GAGzB,OAEI,uBACEC,UAAS,0BAAqBD,EAAME,KAA3B,YAAmCF,EAAMG,SAClD,a,MCLK,SAASC,IAAY,IAAD,EAENC,mBAAS,CAAEC,KAAM,MAAOC,KAAM,MAAOJ,SAAS,IAFxC,mBAExBK,EAFwB,KAEjBC,EAFiB,KAGzBC,EAAO,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,OAuBrD,OACI,yBAAKT,UAAU,YACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAKC,KAAMM,EAAMF,KAAMH,QAASK,EAAML,UACtC,kBAAC,EAAD,CAAKD,KAAMM,EAAMD,KAAMJ,QAASK,EAAML,WAExC,4BAAQQ,QA1Bd,WAEI,IAAMC,EAAUF,EACdG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,SAG7BC,EAAUP,EACZG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,SAIpCP,EAAS,CAAEH,KAAMM,EAASL,KAAMU,EAASd,SAAS,IAIjDe,YAAW,WACTT,EAAS,CAACH,KAAMM,EAASL,KAAMU,EAAQd,SAAS,MAC/C,OAUHgB,SAAUX,EAAML,SAEbK,EAAML,QAAU,aAAe,e,UC5B7BiB,EATJ,WAET,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,QCIcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d3b6f20.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Die.css\";\n\n\nexport default function Dice(props) {\n   \n\n    return (\n       \n        <i\n          className={`Die fas fa-dice-${props.face} ${props.rolling &&\n          \"shaking\"}`}\n         />\n       \n      );\n}\n","import React, { useState } from 'react';\nimport Die from \"./Die\";\nimport \"./RollDice.css\";\n\n\n\nexport default function RollDice() {\n\n    const [state, setState]= useState({ die1: \"one\", die2: \"one\", rolling: false })\n    const sides= [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"];\n\n    \n    function roll() {\n        //pick 2 new rolls\n        const newDie1 = sides[\n          Math.floor(Math.random() * sides.length)\n        ];\n\n        const newDie2 = sides[\n            Math.floor(Math.random() * sides.length)\n          ];\n          \n      \n         setState({ die1: newDie1, die2: newDie2, rolling: true });\n          \n\n\n          setTimeout(() => {\n            setState({die1: newDie1, die2: newDie2,rolling: false });\n          }, 1300);\n    }\n\n    return (\n        <div className='RollDice'>\n          <div className='RollDice-container'>\n            <Die face={state.die1} rolling={state.rolling} />\n            <Die face={state.die2} rolling={state.rolling} />\n          </div>\n          <button onClick={roll} \n          disabled={state.rolling}\n          >\n            {state.rolling ? \"Rolling...\" : \"Roll Dice!\"}\n          </button>\n        </div>\n      );\n}\n","import React from 'react';\nimport RollDice from \"./RollDice\";\nimport \"./App.css\";\n\nconst App= () =>  {\n\n  return (\n    <div className='App'>\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}